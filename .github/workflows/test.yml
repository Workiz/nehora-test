name: ☁️ TEST

on:
  workflow_dispatch:

env:
  ALTER_PROJECT_ID: ${{ secrets.GKE_PROJECT_ALTER }}


jobs:
  create-staging-env:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: github-actions-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            GH_READONLY_TOKEN:${{ env.PROJECT_ID }}/GH_READONLY_TOKEN
            AZURE_HELM_VERSION:${{ env.PROJECT_ID }}/AZURE_HELM_VERSION
            WORKIZ_INFRA_AUTH:${{ env.PROJECT_ID }}/WORKIZ_INFRA_AUTH
            MARKIZBOT_COMMENT_TOKEN:${{ env.PROJECT_ID }}/MARKIZBOT_COMMENT_TOKEN
      - uses: azure/setup-helm@v4.1.0
        with:
          version: ${{ steps.secrets.outputs.AZURE_HELM_VERSION}} 
      - name: 'create matrix for all services'
        id: matrix
        run: |
          RELEASES_JSON=$(helm list --namespace $STAGING_NAMESPACE -o json | jq -c '[.[].name]')
          # Output the matrix in the desired format.
          echo "matrix={\"services\":$RELEASES_JSON}" >> $GITHUB_OUTPUT
  deploy-service:
    needs: create-staging-env
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.create-staging-env.outputs.matrix)}}
      fail-fast: false
      max-parallel: 40
    steps:
      - name: 'Deploy service'
        run: |
          echo "Deploying service ${{ matrix.services }}"
          IMAGE=$(helm get values ${{ matrix.services }} --namespace staging | grep 'tag:' | awk '{print $2}')
          STAGING_NAMESPACE="staging"
          TARGET_NAMESPACE="nehora"
          CHART_REPO="workiz-helm-repo/workiz-chart"
          SECRET_PROJECT_ID="workiz-development"
          TIMEOUT="300s"
          echo "Image: $IMAGE"
          # helm upgrade $RELEASE $CHART_REPO --namespace $ --set secretProjectId=$SECRET_PROJECT_ID --reuse-values --atomic --timeout $TIMEOUT --devel --install --debug \
          # --set secretProjectId=workiz-development \
          # --set gcpProjectId=workiz-development \
          # --set secretProjectId=workiz-development \
          # --set image.registry="gcr.io/workiz-development" \
          # --set image.tag=$IMAGE \
          # --set customNodeEnv=staging  
      
    