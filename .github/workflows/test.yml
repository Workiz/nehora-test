name: ☁️ TEST

on:
  workflow_dispatch:

env:
  PROJECT_ID: workiz-development
  GKE_CLUSTER: staging
  GKE_ZONE: us-central1	
  REPO_NAME: workiz-helm-repo-dev
  NAMESPACE: ${{ github.actor }}


jobs:
  create-staging-env:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/791610978826/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: github-actions-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            AZURE_HELM_VERSION:${{ env.PROJECT_ID }}/AZURE_HELM_VERSION
      - uses: azure/setup-helm@v4.1.0
        with:
          version: ${{ steps.secrets.outputs.AZURE_HELM_VERSION}} 
      - name: 'create matrix for all services'
        id: matrix
        run: |
          EXCLUDE=("account" "ai-services-exp" "backend-php-pt" "backend-php-staging-dev" "elasticsearch-listener" "mongodb-listener" "socket-io" "ts-service" "infra-api" "infra-api-staging" "qb-desktop" "ai-services" "integrations-exp" "microservice-for-infra-tests" "backend-php-staging")
          EXCLUDE_JSON=$(printf '%s\n' "${EXCLUDE[@]}" | jq -R . | jq -s .)
          RELEASES_JSON=$(helm list --namespace staging -o json | jq -c --argjson exclude "$EXCLUDE_JSON" '[.[] | select(.name as $name | $exclude | index($name) | not) | .name]')
          echo "matrix={\"services\":$RELEASES_JSON}"
          echo "matrix={\"services\":$RELEASES_JSON}" >> $GITHUB_OUTPUT
      - name: 'create namespace'
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} || echo "namespace already exists"
      - name: 'create secrets'
        run: |
          kubectl get secret gcpsm-secret -n staging -o yaml | sed 's/staging/${{ env.NAMESPACE }}/g' | kubectl apply -n ${{ env.NAMESPACE }} -f - || echo "secret not found"
          kubectl get secret google-local-key -n staging -o yaml | sed 's/staging/${{ env.NAMESPACE }}/g' | kubectl apply -n ${{ env.NAMESPACE }} -f - || echo "secret not found"
          kubectl get es api-secret-key -n staging -o yaml | sed 's/staging/${{ env.NAMESPACE }}/g' | kubectl apply -n ${{ env.NAMESPACE }} -f - || echo "secret not found"
  deploy-service:
    needs: create-staging-env
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      matrix: ${{fromJson(needs.create-staging-env.outputs.matrix)}}
      fail-fast: false
      max-parallel: 40
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/791610978826/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: github-actions-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            AZURE_HELM_VERSION:${{ env.PROJECT_ID }}/AZURE_HELM_VERSION
      - uses: azure/setup-helm@v4.1.0
        with:
          version: ${{ steps.secrets.outputs.AZURE_HELM_VERSION}} 
      - name: 'Deploy service'
        run: |
          helm plugin install https://github.com/hayorov/helm-gcs.git --version 0.4.1
          helm repo add ${{ env.REPO_NAME }} gs://${{ env.REPO_NAME }}
          helm repo update
          echo "Deploying service ${{ matrix.services }}"
          IMAGE=$(helm get values ${{ matrix.services }} --namespace staging | grep 'tag:' | awk '{print $2}')
          STAGING_NAMESPACE="staging"
          TARGET_NAMESPACE="${{ env.NAMESPACE }}"
          CHART_REPO="workiz-helm-repo-dev/workiz-chart"
          SECRET_PROJECT_ID="workiz-development"
          TIMEOUT="300s"
          echo "Image: $IMAGE"
          echo "Deploying ${{ matrix.services }}"
          helm get values ${{ matrix.services }} --namespace staging -o yaml > existing-values.yaml
          sed -i 's/environment: staging/environment: ${{ env.NAMESPACE }}/g' existing-values.yaml

          helm upgrade ${{ matrix.services }} $CHART_REPO --namespace $TARGET_NAMESPACE --set secretProjectId=$SECRET_PROJECT_ID --values existing-values.yaml --atomic --timeout $TIMEOUT --devel --install --debug \
          --set secretProjectId=workiz-development \
          --set gcpProjectId=workiz-development \
          --set secretProjectId=workiz-development \
          --set image.registry="gcr.io/workiz-development" \
          --set image.tag=$IMAGE \
          --set customNodeEnv=staging \
          --set suspendCrons=true
  deploy-backend-php:
    needs: create-staging-env
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout backend
        uses: actions/checkout@v3
        with:
          repository: Workiz/backend
          ref: DEVOPS-1713-backend-make-backend-work-on-workiz-dev
          token: ${{ secrets.GH_TOKEN_MARKIZ_BOT }}
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/791610978826/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider
          service_account: github-actions-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            AZURE_HELM_VERSION:${{ env.PROJECT_ID }}/AZURE_HELM_VERSION
      - uses: azure/setup-helm@v4.1.0
        with:
          version: ${{ steps.secrets.outputs.AZURE_HELM_VERSION}} 
      - name: 'Deploy backend-php'
        run: |
          APP_VERSION=$(helm get values backend-php-staging-dev --namespace staging | grep 'tag:' | awk 'NR==2 {print $2}')
          echo "APP_VERSION $APP_VERSION"
          K8S_NAMESPACE="${{ env.NAMESPACE }}"
          MARKIZ_BOT_TOKEN="${{ secrets.GH_TOKEN_MARKIZ_BOT }}"
          cp .htaccess ./infra/helm/workiz-backend/backend-base 
          helm dependency update ./infra/helm/staging-dev
          sed -i 's/staging-dev/${{ env.NAMESPACE }}/g' infra/helm/staging-dev/values.staging-dev.yaml
          sed -i 's/staging-dev/${{ env.NAMESPACE }}/g' infra/helm/staging-dev/Chart.yaml
          helm upgrade --install -n $K8S_NAMESPACE backend-php-$K8S_NAMESPACE \
              ./infra/helm/staging-dev \
              -f infra/helm/staging/values.staging.yaml \
              -f infra/helm/staging-dev/values.staging-dev.yaml \
              -f infra/helm/staging-dev/values.crons.staging-dev.yaml \
              --atomic \
              --timeout 300s \
              --set global.image.tag=$APP_VERSION \
              --set global.githubRef="${GITHUB_REF##*/}" \
              --set global.githubSha="latest" \
              --set namespace=$K8S_NAMESPACE   \
              --set $K8S_NAMESPACE.namespace=$K8S_NAMESPACE \
              --set base.namespace=$K8S_NAMESPACE \
              --set staging.namespace=$K8S_NAMESPACE \
              --set global.apacheEnvOverride.overrideBundlePath="https://assets-dev-fe.workiz.com/staging-dev" \
              --set $K8S_NAMESPACE.isCloudEnv=true \
              --set $K8S_NAMESPACE.markizBotToken=${MARKIZ_BOT_TOKEN} \
              --debug
      
          

      
    