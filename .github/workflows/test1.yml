name: TEST1
on:
  workflow_dispatch:
    

env: 
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: wstgcluster
  GKE_ZONE: us-central1-b
  GITHUB_SHA: ${{ github.sha }}
  ALTER_IMAGE: backend-php
  AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
  AMPLITUDE_SECRET_KEY: ${{ secrets.AMPLITUDE_SECRET_KEY }}
  BUCKET_PATH:  static-cdn.workiz.com/fe
  ASSETS_PATH_URL: "https://assets.workiz.com"
  ASSETS_BUCKET_PATH: assets.workiz.com
  K8S_NAMESPACE: prod
  RELEASE_NAME: backend-php-app-new
  BACKEND_PHP_HELM_VERSION: "0.1.0"
  NPM_READONLY_TOKEN: ${{secrets.NPM_READONLY_TOKEN}}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  FRONTEND_ASSETS_BUCKET_PATH: workiz-fe-assets-dev/staging-dev
  ASSETS_PATH_URL_STAGING: "https://assets-dev-be.workiz.com/staging-dev"

jobs:

  build-fe-staging-dev:
    name: build bundle.js for staging-dev
    runs-on: ubuntu-latest
    steps:
    - name: Check out workiz-actions
      uses: actions/checkout@v4
      with:
        repository: Workiz/workiz-actions
        ref: workiz.com
        token: ${{ secrets.GH_TOKEN_MARKIZ_BOT }}
        path: ./tmp/workiz-actions
    - name: releases-msg
      id: releases-msg
      run : |
        json=$(curl --location --request POST 'https://infra-api.workiz.com/github/set_last_release_pr/' \
        --header 'Content-Type: application/json' \
        --data-raw '{ "github_token" : "${{ secrets.GH_TOKEN_MARKIZ_BOT }}" }' )
        echo $json
        # Utility function to parse PRs
        parse_prs() {
          local prs="$1"
          echo "$prs" | jq -r '.[] | select(.message | test("Empty commit") | not) | "• <\(.url)|\(.message)>  by @\(.github_actor)  \\n "'

        }

        # Extract frontend and backend PRs
        frontend_prs=$(echo $json | jq '.frontend.prs')
        backend_prs=$(echo $json | jq '.backend.prs')

        # Extract tag values
        new_tag=$(echo $json | jq -r '.frontend.new_tag')
        last_tag=$(echo $json | jq -r '.frontend.last_tag')

        # Generate message
        msg=$(echo -e "*we released a new version to production* \n *Developers that got mentioned, please check your changes and thumbs-up on this message, so we know that you have checked your code change* :+1: \n :react: *frontend* \n *Release* (from ${last_tag} to ${new_tag}): \n$(parse_prs "$frontend_prs")\n :php: *backend* \n *Release* (from ${last_tag} to ${new_tag}): \n$(parse_prs "$backend_prs")")
        # if new_tag has hf in his name add abc to the message
        if [[ $new_tag == *"hf"* ]]; then
          msg=$(echo -e "*we released a hotfix to production :fire: :fire: :fire:* \n *Developers that got mentioned, please check your changes and thumbs-up on this message, so we know that you have checked your code change* :+1: \n :react: *frontend* \n *Release* (from ${last_tag} to ${new_tag}): \n$(parse_prs "$frontend_prs")\n :php: *backend* \n *Release* (from ${last_tag} to ${new_tag}): \n$(parse_prs "$backend_prs")")
        fi
        payload=$(jq -n --arg msg "$msg" --arg channel "nehoramoshe" '{
          "msg": $msg,
          "success": true,
          "channel": $channel,
          "workiz_logo" : false,
          "links" : [{"name" :"github-action","link": "https://github.com/Workiz/backend/actions/runs/${{github.run_id}}"}]
        }')
        # Send the message to Slack
        curl --location --request POST 'https://infra-api.workiz.com/slack/send_slack_msg/' \
            --header 'WORKIZ_INFRA_AUTH: ${{ secrets.WORKIZ_INFRA_AUTH }}' \
            --header 'Content-Type: application/json' \
            --data-raw "$payload"
    - name: send msg about 
      run: | 
        json=$(curl --location --request POST 'https://infra-api.workiz.com/github/set_new_release_pr/' \
        --header 'Content-Type: application/json' \
        --data-raw '{ "github_token" : "${{ secrets.GH_TOKEN_MARKIZ_BOT }}" }' )
        # Utility function to parse PRs
        parse_prs() {
          local prs="$1"
          # do not insert commits that start with "Empty commit" message
          echo "$prs" | jq -r '.[] | select(.message | test("Empty commit") | not) | "• <\(.url)|\(.message)>  by @\(.github_actor)  \\n "'
        }

        # Extract frontend and backend PRs
        frontend_prs=$(echo $json | jq '.frontend.prs')
        backend_prs=$(echo $json | jq '.backend.prs')

        # Extract tag values
        new_tag=$(echo $json | jq -r '.frontend.new_tag')
        last_tag=$(echo $json | jq -r '.frontend.last_tag')

        # Generate message
        msg=$(echo -e ":react: *frontend* \n *Release candidate* (from ${last_tag} to ${new_tag}): \n$(parse_prs "$frontend_prs")\n :php: *backend* \n *Release candidate* (from ${last_tag} to ${new_tag}): \n$(parse_prs "$backend_prs")")
        payload=$(jq -n --arg msg "$msg" --arg channel "nehoramoshe" '{
          "msg": $msg,
          "success": true,
          "channel": $channel,
          "workiz_logo" : false,
          "links" : [{"name" :"github-action","link": "https://github.com/Workiz/backend/actions/runs/${{github.run_id}}"}]
        }')
        # Send the message to Slack
        curl --location --request POST 'https://infra-api.workiz.com/slack/send_slack_msg/' \
            --header 'WORKIZ_INFRA_AUTH: ${{ secrets.WORKIZ_INFRA_AUTH }}' \
            --header 'Content-Type: application/json' \
            --data-raw "$payload"