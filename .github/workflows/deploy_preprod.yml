name: create tag and deploy
on:
  workflow_dispatch:

env: 
  BACKEND_BRANCH: ${{ github.ref_name }}

jobs:
  create-tag:
    outputs: 
      BACKEND_BRANCH: ${{ steps.create-rc-branch.outputs.BACKEND_BRANCH }}
    name: create frontend and backend tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Checkout nehora
      uses: actions/checkout@v3
      with:
        repository: Workiz/nehora
        ref: master
        token: ${{ secrets.GH_TOKEN_REPOS }}
        path: ./tmp/nehora
    - name: Check out workiz-actions
      uses: actions/checkout@v3
      with:
        repository: Workiz/workiz-actions
        ref: workiz.com
        token: ${{ secrets.GH_TOKEN_MARKIZ_BOT }}
        path: ./tmp/workiz-actions
        fetch-depth: '0'
    - name: create-tag  
      uses: ./tmp/workiz-actions/create-tag
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPOS }}
      # if: ${{ github.ref_name }} == "workiz.com"
      # run: | 
      #   if [[ ! "${{env.BACKEND_BRANCH}}" =~ ^(rc.*)-branch$ ]] && [[ ! "${{env.BACKEND_BRANCH}}" =~ ^(v.*)-branch ]]; then
      #     echo "branch must be rc or hot-fix branch"
      #     exit 1
      #   fi
      #   echo ${{env.BACKEND_BRANCH}}
      #   IFS='-' read -ra tag_name <<< "${{env.BACKEND_BRANCH}}"
      #   tag_name=${tag_name[0]}
      #   echo "$tag_name"
      #   IFS='c' read -ra tag_name <<< "$tag_name"
      #   tag_name=${tag_name[1]}
      #   echo "$tag_name"
      #   tag_name="v$tag_name"
      #   # git tag -a $tag_name -m "$tag_name"
      #   # git push origin $tag_name
      #   echo "$tag_name"
      #   git tag $tag_name
      #   commit=$(git rev-parse HEAD)
      #   git_refs_response=$(
      #   curl -s -X POST https://api.github.com/repos/Workiz/nehora-test/git/refs \
      #   -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #   -d @- << EOF

      #   {
      #   "ref": "refs/tags/$tag_name",
      #   "sha": "$commit"
      #   }
      #   EOF
      #   )

      #   git_ref_posted=$( echo "${git_refs_response}" | jq .ref | tr -d '"' )

      #   echo "::debug::${git_refs_response}"
      #   if [ "${git_ref_posted}" = "refs/tags/${tag_name}" ]; then
      #   exit 0
      #   else
      #   echo "::error::Tag was not created properly."
      #   exit 1
      #   fi

      #   cd ./tmp/frontend


  dyploy-preprod:
    needs: [create-tag]
    name: dyploy-preprod
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

  dyploy-prod:
    needs: [create-tag,dyploy-preprod]
    name: dyploy-prod
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3