name: ☁️ deploy production
on:
  workflow_dispatch:

env: 
  BACKEND_BRANCH: ${{ github.ref_name }}
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  NEWRELIC_KEY: ${{ secrets.NEWRELIC_KEY }}
  NEWRELIC_APP_NAME: app.workiz.com
  MAILGUNKEY: ${{ github.MAILGUNKEY}}
  GCP_REGION: us-central1
  GCP_ZONE: us-central1-b
  IMAGE: backend-img
  REGISTRY_HOSTNAME: gcr.io
  TEMPLATE: backend-
  MIG:  preprod-ig
  URL_MAP_NAME: backend-preprod-lb
  PREPROD_PATH_MATCHER: path-matcher-6
  PREPROD_BE_BUCKET: be-assets-2
  AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
  AMPLITUDE_SECRET_KEY: ${{ secrets.AMPLITUDE_SECRET_KEY }}
  BUCKET_PRE_PATH:  static-cdn.workiz.com/fe/pre/latest
  BUCKET_PATH:  static-cdn.workiz.com/fe/latest
  BUCKET_ROLLBACK_PATH:  static-cdn.workiz.com/fe/older
  API_PATH_MATCHER: path-matcher-7
  APP_PATH_MATCHER: path-matcher-3
  FIRST_GROUP: preprod-ig
  SECOND_GROUP: preprod2-ig
  MAX_RPS: 100
  WORKIZ_INTERNAL_BE: workiz-interal-all-https
  LONG_PROCESS_BE: long-proccess-api
  AUTOSCALE_CPU: 0.35
  COOL_DOWN_SECS: 120
  MAX_REPLICAS: 20
  MIN_REPLICAS: 1
  PROD_DEFAULT_MIN_REPLICAS: 3
  PROD_BE_BUCKET: be-assets-1

jobs:
  check-github-actor:
    name: check github actor
    runs-on: ubuntu-latest
    steps:
    - name: Checkout shared actions
      uses: actions/checkout@v3
      with:
        repository: Workiz/workiz-actions
        ref: workiz.com
        token: ${{ secrets.GH_TOKEN_MARKIZ_BOT }}
        path: ./tmp/workiz-actions
    - name: check github actor 
      uses: ./tmp/workiz-actions/check-github-actor
      with:
        GITHUB_ACTOR: ${{ github.actor }}

  create-tag:
    needs: [check-github-actor]
    outputs: 
      BACKEND_BRANCH: ${{ steps.create-rc-branch.outputs.BACKEND_BRANCH }}
    name: create frontend and backend tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Checkout nehora
      uses: actions/checkout@v3
      with:
        repository: Workiz/nehora
        ref: workiz.com
        token: ${{ secrets.GH_TOKEN_REPOS }}
        path: ./tmp/nehora
    - name: Check out workiz-actions
      uses: actions/checkout@v3
      with:
        repository: Workiz/workiz-actions
        ref: workiz.com
        token: ${{ secrets.GH_TOKEN_MARKIZ_BOT }}
        path: ./tmp/workiz-actions
        fetch-depth: '0'
    - name: create-tag  
      uses: ./tmp/workiz-actions/create-tag
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPOS }}

  build-and-push-preprod-docker:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: preprod
    needs: [create-tag]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0
      with:
        version: '365.0.1'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}
        export_default_credentials: true
        project_id: ${{ secrets.GKE_PROJECT }}  
    - run: |
        # gcloud components install beta
    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        # gcloud auth configure-docker
    - name: Build
      run: |
        # docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
        #   --build-arg GITHUB_SHA="$GITHUB_SHA" \
        #   --build-arg GITHUB_REF="${GITHUB_REF##*/}" .
       # Add tag latest
    - name: Tag
      run: |                
        # docker tag gcr.io/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" gcr.io/"$GKE_PROJECT"/"$IMAGE":latest
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        # docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA

  setup-deploy:
    needs: [create-tag]
    name: create instance template & rollout instance group
    runs-on: ubuntu-latest
    environment: preprod
    steps:
    # Create instance template
    - name: create instance template
      run: |
        # BUILD=${GITHUB_SHA:32}
        # gcloud config set project ${{ secrets.GKE_PROJECT }}
        # gcloud beta compute instance-templates create-with-container --container-privileged $TEMPLATE$BUILD --container-image gcr.io/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" --machine-type n2d-highmem-2 --boot-disk-type pd-ssd --boot-disk-device-name primary_hd --boot-disk-size 50GB --labels env=preprod,kind=backend-web,ssh=,http-server=,https-server= --tags block-attackers,ssh,allow-health-checks,https-server --network sajnetwork --subnet saj --service-account ${{ secrets.GKE_EMAIL }} --scopes default,bigquery,cloud-platform,cloud-source-repos,compute-rw,datastore,logging-write,monitoring-write,pubsub,service-control,sql-admin,storage-full,taskqueue,trace,userinfo-email  --metadata-from-file ssh-keys=infra/pubs/publist  --region $GCP_REGION 
    - name: rollout instance group
      if: success()
      run: |
        # gcloud config set project $GKE_PROJECT 
        # gcloud config set compute/region $GCP_REGION
        # DEFAULT_SERVICE=$(gcloud compute url-maps describe $URL_MAP_NAME  --format="json" --quiet  | python -c "import sys, json; print(list(filter(lambda d:d['name'] == '${PREPROD_PATH_MATCHER}' , json.load(sys.stdin)['pathMatchers']))[0]['defaultService'])")
        
        # PREPROD_MIG=$(gcloud compute backend-services describe $DEFAULT_SERVICE --format="json" --quiet  | python -c "import sys, json; print(json.load(sys.stdin)['backends'][0]['group'].rsplit('/',1)[1])")
        # BUILD=${GITHUB_SHA:32}       
        # gcloud compute instance-groups managed rolling-action start-update $PREPROD_MIG --version template=$TEMPLATE$BUILD --max-surge 3 --zone $GCP_ZONE
        # curl https://us-central1-genial-runway-125805.cloudfunctions.net/build-version?env=preprod.workiz.com

  build-static-files:
    needs: [create-tag]
    name: create instance template & rollout instance group
    runs-on: ubuntu-latest
    environment: preprod
    steps:
    - name: Build Static Files And deploy to bucket ${{ matrix.node-version }}
      if: success()
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: |
        # BUCKET_NAME=be-ast-$(date +%s)
        # BUCKET_PATH=$BUCKET_NAME/_assets
        # BACKEND_SVC_URL=https://www.googleapis.com/compute/beta/projects/$GKE_PROJECT/global/backendBuckets/$PREPROD_BE_BUCKET
        # OLD_BUCKET=$(gcloud compute backend-buckets describe   $BACKEND_SVC_URL --format=json --quiet |  python -c "import sys, json; print(json.load(sys.stdin)['bucketName'])")
        # npm install
        # rm -rf node_modules
        # npm i
        # npm run build
        # gsutil mb  -p ${{ secrets.GKE_PROJECT }} -c STANDARD gs://$BUCKET_NAME 
        # gsutil acl ch -u AllUsers:R gs://$BUCKET_NAME
        # gsutil -m cp -z js,css,html,json,ico,eot,otf,ttf,gif,jpeg,jpg,png,tiff  -a public-read  -r _assets/*   gs://$BUCKET_PATH/
        # gcloud compute backend-buckets update $BACKEND_SVC_URL --gcs-bucket-name=$BUCKET_NAME
    - name: send confirmation email
      if: success()
      run: |
        # curl -sv --user "api:$MAILGUNKEY" https://api.mailgun.net/v3/mg.sendajob.com/messages -F from='Workiz Deployment <notify@workiz.com>' -F to=release@workiz.com -F subject='Pre-production release is ready' --form-string html='<html><body><table><tr><td><h4>PreProd release is done, It will take a few minutes to update </br> <a href="https://github.com/saarubio/sendajob-repo/actions">Press this link to view log  </a>   </h4></td></tr></table></body></html>';     

  deploy-prod:
    needs: [create-tag,build-static-files,setup-deploy,build-and-push-preprod-docker]
    name: deploy-prod - Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: prod
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0
      with:
        version: '365.0.1'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}
        export_default_credentials: true
        project_id: ${{ secrets.GKE_PROJECT }}
    - run: |
        # gcloud components install beta
    
    
    - name: install pip requirements
      run: |
        # pip install -r .github/requirements.txt
    
    - name: switch preprod backend with pro backend
      if: success()
      run: | 
        # gcloud config set project $GKE_PROJECT 
        # gcloud config set compute/region $GCP_REGION
        # #get current services 
        # #preprod current service 
        # DEFAULT_SERVICE=$(gcloud compute url-maps describe $URL_MAP_NAME  --format="json" | python -c "import sys, json; print(list(filter(lambda d:d['name'] == '${PREPROD_PATH_MATCHER}' , json.load(sys.stdin)['pathMatchers']))[0]['defaultService'])")
        # #app service before the switch 
        # APP_SERVICE=$(gcloud compute url-maps describe $URL_MAP_NAME  --format="json" | python -c "import sys, json; print(list(filter(lambda d:d['name'] == '${APP_PATH_MATCHER}' , json.load(sys.stdin)['pathMatchers']))[0]['defaultService'])")
        
        # #### A check to see if backends are different and there wasn't any issues 
        # if [[ "$DEFAULT_SERVICE" == "$APP_SERVICE" ]]; then
        #   echo "Something wrong,Preprod backend and Prod backend are the same."
        #   # Will stop the build if they are the same.
        #   exit 1
        # fi

        
        # APP_CURRENT_PROD_GROUP=$(gcloud compute backend-services describe $APP_SERVICE --global --format=json  | python -c "import sys, json; print(json.load(sys.stdin)['backends'][0]['group'].rsplit('/',1)[1])")
        # APP_CURRENT_PREPROD_GROUP=$(gcloud compute backend-services describe $DEFAULT_SERVICE --global --format=json  | python -c "import sys, json; print(json.load(sys.stdin)['backends'][0]['group'].rsplit('/',1)[1])")
        # echo "get current prod size"
        
        # CURRENT_PROD_GROUP_SIZE=$(gcloud compute instance-groups describe ${APP_CURRENT_PROD_GROUP} --zone $GCP_ZONE --format json  | python -c "import sys, json; print(json.load(sys.stdin)['size'])")
        # if [[ "$CURRENT_PROD_GROUP_SIZE" -lt "$PROD_DEFAULT_MIN_REPLICAS" ]]; then
        #   echo "Something went wrong, current prod backend size is less than 3"
        #   exit 1
        # fi

        # # Scale current pre prod to current prod size
        # echo "Scaling current preprod $APP_CURRENT_PREPROD_GROUP MIG to current prod size (min: $CURRENT_PROD_GROUP_SIZE, max: $MAX_REPLICAS)"
        # gcloud compute instance-groups managed set-autoscaling $APP_CURRENT_PREPROD_GROUP  \
        #   --max-num-replicas ${MAX_REPLICAS} \
        #   --min-num-replicas ${CURRENT_PROD_GROUP_SIZE} \
        #   --target-cpu-utilization ${AUTOSCALE_CPU} \
        #   --cool-down-period ${COOL_DOWN_SECS}  \
        #   --zone=${GCP_ZONE} \
        #   --scale-in-control time-window=600,max-scaled-in-replicas-percent=20
        
        # echo "Waiting for current pre prod $APP_CURRENT_PREPROD_GROUP MIG to scale cuurent prod size. This can take a few minutes."
        # python .github/wait-mig-stable.py --instance-group-manager ${APP_CURRENT_PREPROD_GROUP} --min-replicas ${CURRENT_PROD_GROUP_SIZE}
        # if [[ "$?" -ne "0" ]]; then
        #   echo "Something went wrong, scale pre prod failed"
        #   exit 1
        # fi  

        # echo "Increasing FE CUR VER before the deploy."
        # curl https://us-central1-genial-runway-125805.cloudfunctions.net/build-version?env=app.workiz.com
        # curl https://us-central1-genial-runway-125805.cloudfunctions.net/build-version?env=preprod.workiz.com  

        # #preprod backend static bucket 
        # PREPROD_SVC_URL=https://www.googleapis.com/compute/beta/projects/$GKE_PROJECT/global/backendBuckets/$PREPROD_BE_BUCKET
        # #app backend static bucket 
        # PROD_SVC_URL=https://www.googleapis.com/compute/beta/projects/$GKE_PROJECT/global/backendBuckets/$PROD_BE_BUCKET
        # #create load balancer hosting and redirect rules
        # #starting with releasing preprod content to app 
        # #default app.workiz.com 
        # gcloud compute url-maps add-path-matcher $URL_MAP_NAME   --default-service $DEFAULT_SERVICE  --path-matcher-name $APP_PATH_MATCHER  --existing-host=app.workiz.com  --delete-orphaned-path-matcher
        # #static assets with /_assets path (fixed)
        # gcloud compute url-maps add-path-matcher $URL_MAP_NAME  --default-service $DEFAULT_SERVICE  --path-matcher-name $APP_PATH_MATCHER  --existing-host=app.workiz.com --backend-bucket-path-rules=/_assets/*=$PROD_SVC_URL --delete-orphaned-path-matcher
        # #api.workiz.com 
        # gcloud compute url-maps add-path-matcher $URL_MAP_NAME  --default-service $DEFAULT_SERVICE  --path-matcher-name $API_PATH_MATCHER  --existing-host=api.workiz.com --delete-orphaned-path-matcher
        # #api-cf.workiz.com 
        # gcloud compute url-maps add-path-matcher $URL_MAP_NAME  --default-service $DEFAULT_SERVICE  --path-matcher-name $API_PATH_MATCHER  --existing-host=api-cf.workiz.com --delete-orphaned-path-matcher

        # #now switching with pre-production
        # #default preprod.workiz.com
        # gcloud compute url-maps add-path-matcher $URL_MAP_NAME  --default-service $APP_SERVICE  --path-matcher-name $PREPROD_PATH_MATCHER  --existing-host=preprod.workiz.com --delete-orphaned-path-matcher
        # #preprod assets (fixed)
        # gcloud compute url-maps add-path-matcher $URL_MAP_NAME  --default-service $APP_SERVICE  --path-matcher-name $PREPROD_PATH_MATCHER  --existing-host=preprod.workiz.com --backend-bucket-path-rules=/_assets/*=$PREPROD_SVC_URL --delete-orphaned-path-matcher
        # #default global service 
        # gcloud compute url-maps set-default-service backend-preprod-lb --default-service=$APP_SERVICE
        
        # # swap names of instances groups (Just to clarify the action)
        # APP_NEW_PROD_GROUP=$APP_CURRENT_PREPROD_GROUP
        # APP_NEW_PREPROD_GROUP=$APP_CURRENT_PROD_GROUP
        # # swap name of vars


        # # downscale preprod and prod recommended size to default

        # echo "set $APP_NEW_PREPROD_GROUP MIG to min: $MIN_REPLICAS, and max: $MAX_REPLICAS"
        # gcloud compute instance-groups managed set-autoscaling $APP_NEW_PREPROD_GROUP  \
        #   --max-num-replicas $MAX_REPLICAS \
        #   --min-num-replicas $MIN_REPLICAS \
        #   --target-cpu-utilization ${AUTOSCALE_CPU} \
        #   --cool-down-period ${COOL_DOWN_SECS}  \
        #   --zone=${GCP_ZONE} \
        #   --scale-in-control time-window=600,max-scaled-in-replicas-percent=20


        # echo "set $APP_NEW_PROD_GROUP MIG to min: $PROD_DEFAULT_MIN_REPLICAS, and max: $MAX_REPLICAS"
        # gcloud compute instance-groups managed set-autoscaling $APP_NEW_PROD_GROUP  \
        #   --max-num-replicas $MAX_REPLICAS \
        #   --min-num-replicas $PROD_DEFAULT_MIN_REPLICAS \
        #   --target-cpu-utilization ${AUTOSCALE_CPU} \
        #   --cool-down-period ${COOL_DOWN_SECS}  \
        #   --zone=${GCP_ZONE} \
        #   --scale-in-control time-window=600,max-scaled-in-replicas-percent=20

    - name: release frontend and static files
      if: success()
      run: | 
        #switch static files 
        # gsutil cp  gs://$BUCKET_PATH/bundle.js   gs://$BUCKET_ROLLBACK_PATH/${GITHUB_SHA:32}-bundle.js
        # gsutil cp  gs://$BUCKET_PATH/bundle.js.map   gs://$BUCKET_ROLLBACK_PATH/${GITHUB_SHA:32}-bundle.js.map

        # gsutil cp  gs://$BUCKET_PRE_PATH/bundle.js gs://$BUCKET_PATH/bundle.js
        # gsutil cp  gs://$BUCKET_PRE_PATH/bundle.js.map gs://$BUCKET_PATH/bundle.js.map

        # gsutil cp  gs://$BUCKET_ROLLBACK_PATH/${GITHUB_SHA:32}-bundle.js gs://$BUCKET_PRE_PATH/bundle.js
        # gsutil cp  gs://$BUCKET_ROLLBACK_PATH/${GITHUB_SHA:32}-bundle.js.map gs://$BUCKET_PRE_PATH/bundle.js.map
        # #switch static files 
        
        # echo "Increasing FE CUR VER after the deploy."
        # curl https://us-central1-genial-runway-125805.cloudfunctions.net/build-version?env=app.workiz.com
        # curl https://us-central1-genial-runway-125805.cloudfunctions.net/build-version?env=preprod.workiz.com    
    - name: release backend static files
      if: success()
      run: | 
        # PREPROD_SVC_URL=https://www.googleapis.com/compute/beta/projects/$GKE_PROJECT/global/backendBuckets/$PREPROD_BE_BUCKET
        # PROD_SVC_URL=https://www.googleapis.com/compute/beta/projects/$GKE_PROJECT/global/backendBuckets/$PROD_BE_BUCKET

        # PREPROD_CURRENT_BUCKET=$(gcloud compute backend-buckets describe   $PREPROD_SVC_URL --format=json --quiet |  python -c "import sys, json; print(json.load(sys.stdin)['bucketName'])")
        # OLD_PROD_BUCKET=$(gcloud compute backend-buckets describe   $PROD_SVC_URL --format=json --quiet |  python -c "import sys, json; print (json.load(sys.stdin)['bucketName'])")
        
        # gcloud compute backend-buckets update $PROD_SVC_URL --gcs-bucket-name=$PREPROD_CURRENT_BUCKET
        # gcloud compute backend-buckets update $PREPROD_SVC_URL --gcs-bucket-name=$OLD_PROD_BUCKET
    - name: release long process api
      if: success()
      run: | 
        #replace between groups
        # CURRENT_GROUP=$(gcloud compute backend-services describe $LONG_PROCESS_BE --global --format=json --quiet | python -c "import sys, json; print(json.load(sys.stdin)['backends'][0]['group'].rsplit('/',1)[1])")
        # if [ $CURRENT_GROUP = $SECOND_GROUP ]; then NEXT_GROUP=$FIRST_GROUP; else NEXT_GROUP=$SECOND_GROUP; fi
        # gcloud compute backend-services add-backend $LONG_PROCESS_BE --balancing-mode RATE --max-rate $MAX_RPS --instance-group $NEXT_GROUP --instance-group-zone $GCP_ZONE --global
        # gcloud compute backend-services remove-backend $LONG_PROCESS_BE --instance-group $CURRENT_GROUP --instance-group-zone $GCP_ZONE --global
    
    - name: release internal api
      if: success()
      run: | 
        #replace between groups
        # INTERNAL_GROUP=$(gcloud compute backend-services describe $WORKIZ_INTERNAL_BE --region=us-central1 --format=json --quiet | python -c "import sys, json; print(json.load(sys.stdin)['backends'][0]['group'].rsplit('/',1)[1])")
        # if [ $INTERNAL_GROUP = $SECOND_GROUP ]; then NEXT_INTERNAL_GROUP=$FIRST_GROUP; else NEXT_INTERNAL_GROUP=$SECOND_GROUP; fi
        # gcloud compute backend-services add-backend $WORKIZ_INTERNAL_BE  --balancing-mode CONNECTION  --instance-group $NEXT_INTERNAL_GROUP --instance-group-zone $GCP_ZONE --region $GCP_REGION
        # gcloud compute backend-services remove-backend $WORKIZ_INTERNAL_BE --instance-group $INTERNAL_GROUP --instance-group-zone $GCP_ZONE  --region $GCP_REGION
    
    - name: git pull in legacy servers
      if: success()
      run: | 
        #activate git pull script inside the machine
        # gcloud compute ssh workiz-web01-ver1  --zone=us-central1-b --command "sudo /var/scripts/pull_from_tag.sh $GITHUB_REF_NAME"

    - name: send confirmation email
      if: success()
      run: |
        # curl -sv --user "api:$MAILGUNKEY" https://api.mailgun.net/v3/mg.sendajob.com/messages -F from='Workiz Deployment <notify@workiz.com>' -F to=release@workiz.com -F subject='Release is ready' --form-string html='<html><body><table><tr><td><h4>PreProd release is done, It will take a few minutes to update </br> <a href="https://github.com/saarubio/sendajob-repo/actions">Press this link to view log  </a>   </h4></td></tr></table></body></html>';     

    - name: release to amplitude
      if: success()
      run: |
        # release_date=$(date '+%Y-%m-%d %H:%M:%S')
        # TAG=${GITHUB_REF/refs\/tags\//}
        # curl -d "version=$TAG&release_start=$release_date&release_end=$release_date&title=$TAG&description=backend release&platforms=Desktop&params={\"created_by\": \"infra@workiz.com\"}" -u $AMPLITUDE_API_KEY:$AMPLITUDE_SECRET_KEY -X POST https://amplitude.com/api/2/release

    - name: ':email: Send notification about release'
      if: success()
      env:
        SLACK_RELEASES: ${{ secrets.SLACK_RELEASES }}
        GH_TOKEN_REPOS: ${{ secrets.GH_TOKEN_REPOS }}
      run: |
        # .github/release.sh

  send-slack-msg:
    needs: [deploy-prod]
    name: send slack msg
    runs-on: ubuntu-latest
    steps:
    - name: create-github-release-from-tag
      run: |
        last_tag=$(git tag | sort -V | grep -i "^v.*" | tail -1)
        NOTE=$(curl  -X POST  -H "Accept: application/vnd.github+json"  \
         -H "Authorization: token ${{ secrets.GH_TOKEN_REPOS }} " \
          https://api.github.com/repos/Workiz/nehora-test/releases/generate-notes -d '{"tag_name":"$last_tag"}' |  jq .body)
        echo "NOTE=$NOTE" >> $GITHUB_ENV
    - name: Checkout shared actions
      uses: actions/checkout@v3
      with:
        repository: Workiz/workiz-actions
        ref: workiz.com
        token: ${{ secrets.GH_TOKEN_MARKIZ_BOT }}
        path: ./tmp/workiz-actions
    - name: Send failure slack msg 
      uses: ./tmp/workiz-actions/slack-msg
      with:
        CHANNEL: 'nehora'
        MESSAGE: $NOTE
        SUCCESS: true
        WORKIZ_INFRA_AUTH: ${{ secrets.WORKIZ_INFRA_AUTH }}
        LINKS: '[{"name" :"github-action","link": "https://github.com/Workiz/backend/actions/runs/${{github.run_id}}"}]'
        